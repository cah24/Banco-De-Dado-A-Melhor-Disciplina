CREATE TABLE nomes (
    nome VARCHAR(50)
);

INSERT INTO nomes (nome) VALUES
    ('Roberta'),
    ('Roberto'),
    ('Maria Clara'),
    ('João');

SELECT UPPER(nome) FROM nomes;

SELECT nome, LENGTH(nome) AS tamanho FROM nomes;

SELECT
    CASE
        WHEN nome LIKE 'Roberto%' OR nome LIKE 'João%' THEN CONCAT('Sr. ', nome)
        ELSE CONCAT('Sra. ', nome)
    END AS nome_com_tratamento
FROM nomes

CREATE TABLE produtos (
    produto VARCHAR(50),
    preco DECIMAL(10, 2),
    quantidade INT
);

INSERT INTO produtos (produto, preco, quantidade) VALUES
    ('Produto A', 19.99, 5),
    ('Produto B', 29.99, 10),
    ('Produto C', 9.99, 0);

SELECT produto, ROUND(preco, 2) AS preco_arredondado FROM produtos;

SELECT produto, ABS(quantidade) AS quantidade_absoluta FROM produtos;

SELECT AVG(preco) AS media_preco FROM produtos;

CREATE TABLE eventos (
    data_evento DATE
);

INSERT INTO eventos (data_evento) VALUES
    ('2023-10-01'),
    ('2023-10-02'),
    ('2023-10-05');

INSERT INTO eventos (data_evento) VALUES (NOW());

SELECT DATEDIFF('2023-10-05', '2023-10-01') AS dias_entre_datas FROM eventos LIMIT 1;

SELECT data_evento, DAYNAME(data_evento) AS nome_dia_semana FROM eventos;

SELECT produto,
    IF(quantidade > 0, 'Em estoque', 'Fora de estoque') AS status_estoque
FROM produtos;

SELECT produto,
    CASE
        WHEN preco < 10 THEN 'Barato'
        WHEN preco >= 10 AND preco <= 20 THEN 'Médio'
        ELSE 'Caro'
    END AS categoria_preco
FROM produtos;

DELIMITER //

CREATE FUNCTION TOTAL_VALOR(preco DECIMAL(10, 2), quantidade INT)
RETURNS DECIMAL(10, 2)
BEGIN
    RETURN preco * quantidade;
END //

DELIMITER ;

SELECT produto, quantidade, TOTAL_VALOR(preco, quantidade) AS valor_total FROM produtos;

SELECT COUNT(*) AS total_produtos FROM produtos;

SELECT produto, preco FROM produtos WHERE preco = (SELECT MAX(preco) FROM produtos);

SELECT produto, preco FROM produtos WHERE preco = (SELECT MIN(preco) FROM produtos);

SELECT SUM(IF(quantidade > 0, preco * quantidade, 0)) AS soma_total_estoque FROM produtos;

DELIMITER //

CREATE FUNCTION CALC_FATORIAL(n INT)
RETURNS INT
BEGIN
    DECLARE resultado INT DEFAULT 1;
    DECLARE i INT DEFAULT 1;
    WHILE i <= n DO
        SET resultado = resultado * i;
        SET i = i + 1;
    END WHILE;
    RETURN resultado;
END //

DELIMITER ;

DELIMITER //

CREATE FUNCTION CALC_EXPONENCIAL(base INT, expoente INT)
RETURNS INT
BEGIN
    DECLARE resultado INT DEFAULT 1;
    DECLARE i INT DEFAULT 1;
    WHILE i <= expoente DO
        SET resultado = resultado * base;
        SET i = i + 1;
    END WHILE;
    RETURN resultado;
END //

DELIMITER ;

DELIMITER //

CREATE FUNCTION IS_PALINDROMO(palavra VARCHAR(50))
RETURNS INT
BEGIN
    DECLARE reverso VARCHAR(50);
    SET reverso = REVERSE(palavra);
    IF palavra = reverso THEN
        RETURN 1;
    ELSE
        RETURN 0;
    END IF;
END //

DELIMITER ;













